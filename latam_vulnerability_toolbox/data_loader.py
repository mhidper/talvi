
import pandas as pd
import requests
import comtradeapicall
import xml.etree.ElementTree as ET

def get_historical_trade_data(subscription_key, country_code, years=None):
    """
    Obtiene datos históricos de comercio para múltiples años desde UN Comtrade.
    """
    if years is None:
        years = list(map(str, range(1997, 2025)))
    
    all_data = []

    for year in years:
        print(f"Obteniendo datos de comercio para {year}...", end='')
        try:
            year_data = comtradeapicall.getFinalData(
                subscription_key, 
                typeCode='C', 
                freqCode='A', 
                clCode='HS', 
                period=year,
                reporterCode=country_code, 
                cmdCode=None, 
                flowCode=None,
                partnerCode=0,
                partner2Code=None,
                maxRecords=50000, 
                format_output='JSON',
                includeDesc=True,
                customsCode=None, 
                motCode=None,
                aggregateBy=None, 
                breakdownMode='classic', 
                countOnly=None
            )
            
            if year_data is not None and not year_data.empty:
                year_data_filtered = year_data[year_data['aggrLevel'] == 6].copy()
                year_data_filtered['year'] = int(year)
                all_data.append(year_data_filtered)
                print(f"  {len(year_data_filtered)} registros obtenidos.")
            else:
                print("  No se encontraron datos.")
            
        except Exception as e:
            print(f"\nError obteniendo datos para {year}: {e}")
            continue
    
    if all_data:
        combined_data = pd.concat(all_data, ignore_index=True)
        print(f"Total datos históricos de comercio: {len(combined_data)} registros")
        return combined_data
    else:
        print("No se pudieron obtener datos históricos de comercio.")
        return pd.DataFrame()

def get_oecd_cpi_data(start_period="1999-01", end_period="2025-05"):
    """
    Obtiene el índice de precios al consumidor (CPI) del G7 desde la API de la OECD.
    """
    url = f"https://sdmx.oecd.org/public/rest/data/OECD.SDD.TPS,DSD_PRICES@DF_PRICES_ALL,1.0/G7.M.N.CPI.IX._T.N.GY+_Z?startPeriod={start_period}&endPeriod={end_period}"
    
    print(f"Obteniendo datos de CPI del G7 desde OECD...", end='')
    response = requests.get(url)
    
    if response.status_code == 200:
        print(f" Status: {response.status_code}")
        root = ET.fromstring(response.content)
        
        namespaces = {
            'message': 'http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message',
            'generic': 'http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic'
        }
        
        data = []
        for obs in root.findall('.//generic:Obs', namespaces):
            time_elem = obs.find('generic:ObsDimension[@id="TIME_PERIOD"]', namespaces)
            value_elem = obs.find('generic:ObsValue', namespaces)
            
            if time_elem is not None and value_elem is not None:
                period = time_elem.get('value')
                value = float(value_elem.get('value'))
                data.append({'date': period, 'cpi_g7': value})
        
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        df = df.set_index('date')
        df = df.sort_index()
        
        print(f"Datos de CPI extraídos: {len(df)} observaciones")
        return df
    
    else:
        print(f" Error: {response.status_code}")
        return None

def prepare_cpi_deflator(cpi_g7_df):
    """
    Convierte el DataFrame de CPI del G7 a base 2016=100.
    """
    if cpi_g7_df is None or cpi_g7_df.empty:
        return None
        
    cpi_2016_avg = cpi_g7_df.loc[cpi_g7_df.index.year == 2016, 'cpi_g7'].mean()
    if pd.isna(cpi_2016_avg) or cpi_2016_avg == 0:
        print("Error: No se pudo calcular la media del CPI para 2016.")
        return None

    conversion_factor = 100 / cpi_2016_avg
    cpi_2016_base = cpi_g7_df['cpi_g7'] * conversion_factor
    
    print(f"CPI G7 convertido a base 2016=100.")
    
    return cpi_2016_base
