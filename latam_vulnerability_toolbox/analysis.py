import pandas as pd
import numpy as np
import warnings
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.tsa.vector_ar.vecm import VECM, coint_johansen

def create_model_dataframe(ctot_results_path, macro_indicators_path, gdp_path):
    """
    Carga, limpia y consolida los datos de diferentes fuentes en un √∫nico DataFrame
    listo para el modelo VECM.
    """
    # ... (c√≥digo existente) ...

def prepare_vecm_variables(df_model):
    """
    Prepara las variables finales para el modelo VECM, aplicando logaritmos y ponderaciones.
    """
    # ... (c√≥digo existente) ...

def perform_stationarity_tests(df, significance_level=0.05):
    """
    Realiza tests de ra√≠z unitaria (ADF y KPSS) en las columnas de un DataFrame.
    """
    # ... (c√≥digo existente) ...

def find_cointegration_rank(df, det_order=1, k_ar_diff=2):
    """
    Realiza el test de cointegraci√≥n de Johansen para determinar el n√∫mero de relaciones.
    """
    print("\n" + "="*50)
    print("üîç PASO 4: TEST DE COINTEGRACI√ìN DE JOHANSEN")
    print("="*50)

    johansen_result = coint_johansen(df.values, det_order=det_order, k_ar_diff=k_ar_diff)
    
    trace_stat = johansen_result.lr1
    crit_vals = johansen_result.cvt[:, 1] # 5% significance level
    
    print(f"{'Rank':<5} {'Trace Statistic':<20} {'5% Critical Value':<20} {'Cointegrated?':<15}")
    print("-" * 60)

    rank = 0
    for i in range(len(trace_stat)):
        is_coint = "S√≠" if trace_stat[i] > crit_vals[i] else "No"
        if is_coint == "S√≠":
            rank += 1
        print(f"{i:<5} {trace_stat[i]:<20.4f} {crit_vals[i]:<20.4f} {is_coint:<15}")

    print(f"\n‚úÖ Relaciones de cointegraci√≥n encontradas: {rank}")
    return rank

def estimate_vecm(df, rank, k_ar_diff=2, deterministic='ci'):
    """
    Estima el modelo VECM.
    """
    # ... (c√≥digo existente) ...

def calculate_indicator(vecm_results, df):
    """
    Calcula el indicador de condiciones externas a partir de los resultados del VECM.
    """
    # ... (c√≥digo existente) ...

def calculate_irf(vecm_results, periods=20):
    """
    Calcula las Funciones de Impulso-Respuesta (IRF) del modelo VECM.
    """
    # ... (c√≥digo existente) ...